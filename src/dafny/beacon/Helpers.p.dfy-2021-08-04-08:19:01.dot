digraph G {
fontname=helvetica;
subgraph cluster_SeqHelpers {
style=filled;
fontsize="20.0";
fillcolor="#d0d1e6";
fontcolor="#3690c0";
penwidth=2;
label=SeqHelpers;
seqToSet [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#3690c0"];
seqInter [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#3690c0"];
}

subgraph cluster_Eth2Types {
style=filled;
fontsize="20.0";
fillcolor=cornsilk;
fontcolor=bisque3;
penwidth=2;
label=Eth2Types;
typeOf [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
wellTyped [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
}

subgraph cluster_MathHelpers {
style=filled;
fontsize="20.0";
fillcolor="#fee6ce";
fontcolor="#fd8d3c";
penwidth=2;
label=MathHelpers;
get__prev__power__of__two [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
isPowerOf2 [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
power2 [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
get__next__power__of__two [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
range [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
}

subgraph cluster_Helpers {
style=filled;
fontsize="20.0";
fillcolor="#fde0ef";
fontcolor="#de77ae";
penwidth=2;
label=Helpers;
seqBinOpMap [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
seqMap [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
timeSeq [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
flatten [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
ceil [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
flattenLength [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
}

subgraph cluster__System {
style=filled;
fontsize="20.0";
fillcolor=lightpink;
fontcolor=tomato;
penwidth=2;
label=_System;
requires [shape=rectangle, style=filled, fontname=helvetica, fillcolor=tomato];
}

subgraph cluster_BeaconHelperSpec {
style=filled;
fontsize="20.0";
fillcolor="#ffffdd";
fontcolor=gold;
penwidth=2;
label=BeaconHelperSpec;
keysInValidators [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
get__VolExit__validator__indices [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
total__deposits [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
trueBitsCount [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
sorted__intersection__fn [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
collectValidatorsAttestatingForLink [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
get__PS__validator__indices [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
total__balances [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
collectValidatorsIndicesAttestatingForTarget [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
}

seqBinOpMap -> seqBinOpMap;
seqMap -> requires;
seqMap -> seqMap;
timeSeq -> timeSeq;
typeOf -> typeOf;
typeOf -> wellTyped;
get__prev__power__of__two -> get__prev__power__of__two;
keysInValidators -> keysInValidators;
get__VolExit__validator__indices -> get__VolExit__validator__indices;
flatten -> flatten;
flatten -> flattenLength;
total__deposits -> total__deposits;
isPowerOf2 -> power2;
power2 -> power2;
trueBitsCount -> trueBitsCount;
ceil -> ceil;
sorted__intersection__fn -> sorted__intersection__fn;
collectValidatorsAttestatingForLink -> collectValidatorsAttestatingForLink;
collectValidatorsAttestatingForLink -> trueBitsCount;
flattenLength -> flattenLength;
seqToSet -> seqToSet;
get__next__power__of__two -> get__next__power__of__two;
range -> range;
get__PS__validator__indices -> get__PS__validator__indices;
total__balances -> total__balances;
collectValidatorsIndicesAttestatingForTarget -> collectValidatorsIndicesAttestatingForTarget;
collectValidatorsIndicesAttestatingForTarget -> trueBitsCount;
wellTyped -> typeOf;
wellTyped -> wellTyped;
seqInter -> seqInter;
}
